{"version":3,"sources":["webpack:///./src/components/post-card-minimal/post-card-minimal.style.tsx","webpack:///./src/components/post-card-minimal/post-card-minimal.tsx","webpack:///./src/templates/blog-list.tsx","webpack:///./src/components/pagination/pagination.tsx","webpack:///./src/components/pagination/pagination.style.tsx"],"names":["PostCardWrapper","styled","div","PostPreview","PostDetails","PostDate","themeGet","PostContent","PostTitle","h2","Excerpt","p","PostTags","PostDateAndPreview","ReadMore","PostCardMinimal","image","title","description","url","date","tags","className","imageType","props","addAllClasses","push","join","dangerouslySetInnerHTML","__html","to","fluid","alt","fixed","map","tag","index","key","defaultProps","BlogList","posts","data","allMarkdownRemark","edges","pageContext","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","PrevLink","NextLink","node","fields","slug","frontmatter","featuredImg","childImageSharp","excerpt","prevLink","nextLink","totalPage","Pagination","aria-label","PaginationWrapper","PrevPage","NextPage","PageNumber"],"mappings":"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","file":"component---src-templates-blog-list-tsx-9e5d889fc89c642c3d1e.js","sourcesContent":["import styled from 'styled-components';\r\nimport { themeGet } from '@styled-system/theme-get';\r\n\r\nexport const PostCardWrapper = styled.div`\r\n  position: relative;\r\n  &:hover {\r\n    .post_preview {\r\n      transform: translateY(0);\r\n    }\r\n    .post_date {\r\n      transform: translateY(100%);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const PostPreview = styled.div`\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  transform: translateY(-100%);\r\n  transition: 0.35s ease-in-out;\r\n  img {\r\n    border-radius: 3px;\r\n  }\r\n  @media (max-width: 1024px) {\r\n    transform: translateY(0);\r\n  }\r\n  @media (max-width: 575px) {\r\n    margin-bottom: 30px;\r\n    width: auto;\r\n    height: auto;\r\n    position: relative;\r\n    transform: translateY(0);\r\n  }\r\n`;\r\n\r\nexport const PostDetails = styled.div`\r\n  display: flex;\r\n  @media (max-width: 575px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nexport const PostDate = styled.div`\r\n  font-size: 90px;\r\n  font-weight: 700;\r\n  text-align: center;\r\n  width: 100%;\r\n  height: 100%;\r\n  line-height: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: ${themeGet('colors.postDate')};\r\n  transition: 0.35s ease-in-out;\r\n  a {\r\n    color: ${themeGet('colors.postDate')};\r\n  }\r\n  @media (max-width: 1200px) {\r\n    font-size: 70px;\r\n  }\r\n  @media (max-width: 990px) {\r\n    font-size: 56px;\r\n  }\r\n  @media (max-width: 575px) {\r\n    display: none;\r\n  }\r\n\r\n  > span {\r\n    font-size: 13px;\r\n    font-weight: 400;\r\n    display: block;\r\n    margin-top: 12px;\r\n    text-transform: uppercase;\r\n  }\r\n`;\r\n\r\nexport const PostContent = styled.div`\r\n  align-self: center;\r\n`;\r\n\r\nexport const PostTitle = styled.h2`\r\n  font-size: 21px;\r\n  font-weight: 700;\r\n  color: ${themeGet('colors.postTitle')};\r\n  line-height: 1.53;\r\n  margin-bottom: 10px;\r\n  font-family: 'Fira Sans', sans-serif;\r\n  a {\r\n    color: ${themeGet('colors.postTitle')};\r\n  }\r\n  @media (max-width: 1200px) {\r\n    font-size: 21px;\r\n  }\r\n  @media (max-width: 990px) {\r\n    font-size: 19px;\r\n    margin-bottom: 12px;\r\n  }\r\n  @media (max-width: 575px) {\r\n    font-size: 17px;\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n\r\nexport const Excerpt = styled.p`\r\n  font-size: ${themeGet('fontSizes.3')}px;\r\n  color: ${themeGet('colors.bodyText')};\r\n  font-weight: 400;\r\n  line-height: 2;\r\n  margin-bottom: 0;\r\n  @media (max-width: 990px) {\r\n    font-size: 14px;\r\n  }\r\n`;\r\n\r\nexport const PostTags = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  margin-bottom: 15px;\r\n\r\n  a {\r\n    display: block;\r\n    margin-right: 30px;\r\n    font-size: 14px;\r\n    font-weight: 400;\r\n    color: ${themeGet('colors.primaryLinks')};\r\n    transition: 0.15s ease-in-out;\r\n    &:hover {\r\n      color: ${themeGet('colors.primaryLinksHover')};\r\n    }\r\n    @media (max-width: 990px) {\r\n      font-size: 13px;\r\n      margin-right: 25px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const PostDateAndPreview = styled.div`\r\n  position: relative;\r\n  margin-right: 45px;\r\n  flex-shrink: 0;\r\n  overflow: hidden;\r\n  height: 170px;\r\n  width: 170px;\r\n  @media (max-width: 1200px) {\r\n    margin-right: 35px;\r\n  }\r\n  @media (max-width: 990px) {\r\n    margin-right: 25px;\r\n  }\r\n  @media (max-width: 575px) {\r\n    height: auto;\r\n    width: auto;\r\n  }\r\n`;\r\n\r\nexport const ReadMore = styled.div`\r\n  margin-top: 16px;\r\n  a {\r\n    font-size: 13px;\r\n    font-weight: 500;\r\n    color: ${themeGet('colors.secondaryLinks')};\r\n    transition: 0.15s ease-in-out;\r\n    &:hover {\r\n      color: ${themeGet('colors.secondaryLinksHover')};\r\n    }\r\n  }\r\n`;\r\n","import * as React from 'react';\r\nimport { Link } from 'gatsby';\r\nimport _ from 'lodash';\r\nimport Img from 'gatsby-image';\r\nimport {\r\n  PostCardWrapper,\r\n  PostPreview,\r\n  PostDetails,\r\n  PostDate,\r\n  PostTitle,\r\n  Excerpt,\r\n  PostContent,\r\n  PostTags,\r\n  PostDateAndPreview,\r\n  ReadMore,\r\n} from './post-card-minimal.style';\r\n\r\ninterface PostCardMinimalProps {\r\n  image?: any;\r\n  title: string;\r\n  description?: string;\r\n  url: string;\r\n  date?: string;\r\n  tags?: [];\r\n  className?: string;\r\n  imageType?: 'fixed' | 'fluid';\r\n}\r\n\r\nconst PostCardMinimal: React.FunctionComponent<PostCardMinimalProps> = ({\r\n  image,\r\n  title,\r\n  description,\r\n  url,\r\n  date,\r\n  tags,\r\n  className,\r\n  imageType,\r\n  ...props\r\n}) => {\r\n  // Add all classs to an array\r\n  const addAllClasses = ['post_card'];\r\n\r\n  // className prop checking\r\n  if (className) {\r\n    addAllClasses.push(className);\r\n  }\r\n\r\n  return (\r\n    <PostCardWrapper className={addAllClasses.join(' ')} {...props}>\r\n      <PostDetails className=\"post_details\">\r\n        <PostDateAndPreview>\r\n          {date && (\r\n            <PostDate\r\n              dangerouslySetInnerHTML={{\r\n                __html: date,\r\n              }}\r\n              className=\"post_date\"\r\n            />\r\n          )}\r\n          {image == null ? null : (\r\n            <PostPreview className=\"post_preview\">\r\n              <Link to={url}>\r\n                {imageType === 'fluid' ? (\r\n                  <Img fluid={image} alt=\"post preview\" />\r\n                ) : (\r\n                  <Img fixed={image} alt=\"post preview\" />\r\n                )}\r\n              </Link>\r\n            </PostPreview>\r\n          )}\r\n        </PostDateAndPreview>\r\n\r\n        <PostContent className=\"post_content\">\r\n          {tags == null ? null : (\r\n            <PostTags className=\"post_tags\">\r\n              {tags.map((tag: string, index: number) => (\r\n                <Link key={index} to={`/tags/${_.kebabCase(tag)}/`}>\r\n                  {`#${tag}`}\r\n                </Link>\r\n              ))}\r\n            </PostTags>\r\n          )}\r\n          <PostTitle className=\"post_title\">\r\n            <Link to={url}>{title}</Link>\r\n          </PostTitle>\r\n          {description && (\r\n            <Excerpt\r\n              dangerouslySetInnerHTML={{\r\n                __html: description,\r\n              }}\r\n              className=\"excerpt\"\r\n            />\r\n          )}\r\n          <ReadMore>\r\n            <Link to={url}>Read More</Link>\r\n          </ReadMore>\r\n        </PostContent>\r\n      </PostDetails>\r\n    </PostCardWrapper>\r\n  );\r\n};\r\n\r\nPostCardMinimal.defaultProps = {\r\n  imageType: 'fluid',\r\n};\r\n\r\nexport default PostCardMinimal;\r\n","import React from 'react';\r\nimport {graphql} from 'gatsby';\r\nimport PostCardMinimal from '../components/post-card-minimal/post-card-minimal';\r\nimport Pagination from '../components/pagination/pagination';\r\nimport Layout from '../components/layout';\r\nimport SEO from '../components/seo';\r\nimport {BlogPostsWrapper} from './templates.style';\r\n\r\nexport const pageQuery = graphql`\r\n    query BlogListQuery($skip: Int!, $limit: Int!) {\r\n        site {\r\n            siteMetadata {\r\n                title\r\n            }\r\n        }\r\n        sitePage {\r\n            path\r\n        }\r\n        allMarkdownRemark(\r\n            sort: { fields: [frontmatter___date], order: DESC }\r\n            limit: $limit\r\n            skip: $skip\r\n        ) {\r\n            edges {\r\n                node {\r\n                    excerpt(pruneLength: 300)\r\n                    fields {\r\n                        slug\r\n                    }\r\n                    frontmatter {\r\n                        date(formatString: \"DD [<span>] MMMM [</span>]\")\r\n                        title\r\n                        description\r\n                        tags\r\n                        featuredImg {\r\n                            childImageSharp {\r\n                                fluid(maxWidth: 170, maxHeight: 170, quality: 90) {\r\n                                    ...GatsbyImageSharpFluid_withWebp_tracedSVG\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst BlogList = (props: any) => {\r\n    const {data} = props;\r\n    const posts = data.allMarkdownRemark.edges;\r\n    const {currentPage, numPages} = props.pageContext;\r\n    const isFirst = currentPage === 1;\r\n    const isLast = currentPage === numPages;\r\n    const prevPage =\r\n        currentPage - 1 === 1 ? '/page/1' : `/page/${(currentPage - 1).toString()}`;\r\n    const nextPage = `/page/${(currentPage + 1).toString()}`;\r\n    const PrevLink = !isFirst && prevPage;\r\n    const NextLink = !isLast && nextPage;\r\n\r\n    return (\r\n        <Layout>\r\n            <SEO title={`Page ${currentPage}`}/>\r\n\r\n            <BlogPostsWrapper>\r\n                {posts.map(({node}: any) => {\r\n                    return (\r\n                        <PostCardMinimal\r\n                            key={node.fields.slug}\r\n                            title={node.frontmatter.title || node.fields.slug}\r\n                            image={\r\n                                node.frontmatter.featuredImg.childImageSharp.fluid\r\n                            }\r\n                            url={node.fields.slug}\r\n                            description={node.frontmatter.description || node.excerpt}\r\n                            date={node.frontmatter.date}\r\n                            tags={node.frontmatter.tags}\r\n                        />\r\n                    );\r\n                })}\r\n\r\n                <Pagination\r\n                    prevLink={PrevLink}\r\n                    nextLink={NextLink}\r\n                    currentPage={`${currentPage}`}\r\n                    totalPage={`${numPages}`}\r\n                />\r\n            </BlogPostsWrapper>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default BlogList;\r\n","import * as React from 'react';\r\nimport { Link } from 'gatsby';\r\nimport { IoMdArrowRoundBack, IoMdArrowRoundForward } from 'react-icons/io';\r\nimport {\r\n  PaginationWrapper,\r\n  PrevPage,\r\n  NextPage,\r\n  PageNumber,\r\n} from './pagination.style';\r\n\r\ntype PaginationProps = {\r\n  prevLink?: string | undefined | null | boolean;\r\n  nextLink?: string | undefined | null | boolean;\r\n  currentPage: string;\r\n  totalPage: string;\r\n  className?: string;\r\n};\r\n\r\nconst Pagination: React.FunctionComponent<PaginationProps> = ({\r\n  prevLink,\r\n  nextLink,\r\n  currentPage,\r\n  totalPage,\r\n  className,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <PaginationWrapper {...props} className={className}>\r\n      <PrevPage>\r\n        {prevLink && (\r\n          <Link to={`${prevLink}`} aria-label=\"Prev\">\r\n            <IoMdArrowRoundBack />\r\n          </Link>\r\n        )}\r\n      </PrevPage>\r\n\r\n      <PageNumber>{`Page ${currentPage} Of ${totalPage}`}</PageNumber>\r\n\r\n      <NextPage>\r\n        {nextLink && (\r\n          <Link to={`${nextLink}`} aria-label=\"Next\">\r\n            <IoMdArrowRoundForward />\r\n          </Link>\r\n        )}\r\n      </NextPage>\r\n    </PaginationWrapper>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import styled from 'styled-components';\r\nimport { themeGet } from '@styled-system/theme-get';\r\n\r\nexport const PaginationWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const PrevPage = styled.div`\r\n  min-width: 32px;\r\n  a {\r\n    width: 32px;\r\n    height: 32px;\r\n    background-color: ${themeGet('colors.buttonLinks')};\r\n    color: ${themeGet('colors.buttonLinksText')};\r\n    border-radius: 50%;\r\n    font-size: 18px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    transition: 0.15s ease-in-out;\r\n    svg {\r\n      display: block;\r\n    }\r\n    &:hover {\r\n      background-color: ${themeGet('colors.buttonLinksHover')};\r\n    }\r\n  }\r\n`;\r\n\r\nexport const NextPage = styled.div`\r\n  min-width: 32px;\r\n  a {\r\n    width: 32px;\r\n    height: 32px;\r\n    background-color: ${themeGet('colors.buttonLinks')};\r\n    color: ${themeGet('colors.buttonLinksText')};\r\n    border-radius: 50%;\r\n    font-size: 18px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    transition: 0.15s ease-in-out;\r\n    svg {\r\n      display: block;\r\n    }\r\n    &:hover {\r\n      background-color: ${themeGet('colors.buttonLinksHover')};\r\n    }\r\n  }\r\n`;\r\n\r\nexport const PageNumber = styled.div`\r\n  color: ${themeGet('colors.bodyText')};\r\n`;\r\n"],"sourceRoot":""}