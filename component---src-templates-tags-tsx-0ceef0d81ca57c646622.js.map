{"version":3,"sources":["webpack:///./src/templates/tags.tsx","webpack:///./src/components/post-card/post-card.style.tsx","webpack:///./src/components/post-card/post-card.tsx"],"names":["Tags","pageContext","data","tag","allMarkdownRemark","edges","totalCount","title","description","map","node","key","fields","slug","frontmatter","url","excerpt","date","tags","PostCardWrapper","styled","div","PostPreview","PostDetails","PostDate","themeGet","PostContent","PostTitle","h2","Excerpt","p","PostTags","PostCard","image","collection","className","imageType","props","addAllClasses","push","join","to","fluid","alt","fixed","dangerouslySetInnerHTML","__html","index","defaultProps"],"mappings":"4FAAA,gFAmCeA,UA5BF,SAAC,GAA+B,IAA7BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,KACnBC,EAAQF,EAARE,IACR,EAA8BD,EAAKE,kBAA3BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WAEf,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAOJ,EAAKK,YAAW,mBAAqBF,EAArB,SAAuCA,EAAa,EAAI,IAAM,MAE1F,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAUH,GADZ,mBAEsBG,EAFtB,SAEwCA,EAAa,GAAK,MAEzDD,EAAMI,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACT,kBAAC,IAAD,CACEC,IAAKD,EAAKE,OAAOC,KACjBN,MAAOG,EAAKI,YAAYP,MACxBQ,IAAKL,EAAKE,OAAOC,KACjBL,YAAaE,EAAKI,YAAYN,aAAeE,EAAKM,QAClDC,KAAMP,EAAKI,YAAYG,KACvBC,KAAMR,EAAKI,YAAYI,c,4ICxBtBC,EAAkBC,IAAOC,IAAV,sFAAGD,CAAH,+BAIfE,EAAcF,IAAOC,IAAV,kFAAGD,CAAH,gGASXG,EAAcH,IAAOC,IAAV,kFAAGD,CAAH,0BAIXI,EAAWJ,IAAOC,IAAV,+EAAGD,CAAH,+mBAOVK,YAAS,mBAEPA,YAAS,oBAyBTC,EAAcN,IAAOC,IAAV,kFAAGD,CAAH,+BAIXO,EAAYP,IAAOQ,GAAV,gFAAGR,CAAH,iXAGXK,YAAS,oBAKPA,YAAS,qBAgBTI,EAAUT,IAAOU,EAAV,8EAAGV,CAAH,kKACLK,YAAS,eACbA,YAAS,oBASPM,EAAWX,IAAOC,IAAV,+EAAGD,CAAH,qXAWRK,YAAS,uBAGPA,YAAS,6B,2FChFlBO,EAAmD,SAAC,GAarD,IAXGC,EAWH,EAXGA,MACA1B,EAUH,EAVGA,MACAC,EASH,EATGA,YACAO,EAQH,EARGA,IACAE,EAOH,EAPGA,KACAC,EAMH,EANGA,KACAgB,EAKH,EALGA,WACAC,EAIH,EAJGA,UACAC,EAGH,EAHGA,UACGC,EAEN,iBAEKC,EAAgB,CAAC,aAOvB,OAJIH,GACAG,EAAcC,KAAKJ,GAInB,gBAAChB,EAAD,eAAiBgB,UAAWG,EAAcE,KAAK,MAAUH,GAC3C,MAATJ,EAAgB,KACb,gBAACX,EAAD,CAAaa,UAAU,gBACnB,gBAAC,OAAD,CAAMM,GAAI1B,GACS,UAAdqB,EACG,gBAAC,IAAD,CAAKM,MAAOT,EAAOU,IAAI,iBAEvB,gBAAC,IAAD,CAAKC,MAAOX,EAAOU,IAAI,mBAMvC,gBAACpB,EAAD,CAAaY,UAAU,gBAClBlB,GACG,gBAACO,EAAD,CACIqB,wBAAyB,CACrBC,OAAQ7B,GAEZkB,UAAU,cAIlB,gBAACT,EAAD,CAAaS,UAAU,gBACnB,gBAACR,EAAD,CAAWQ,UAAU,cACjB,gBAAC,OAAD,CAAMM,GAAI1B,GAAMR,IAEnBC,GACG,gBAACqB,EAAD,CACIgB,wBAAyB,CACrBC,OAAQtC,GAEZ2B,UAAU,YAIjBD,GAA4B,MAARhB,EAAP,KACV,gBAACa,EAAD,CAAUI,UAAU,aACfjB,EAAKT,KAAI,SAACN,EAAa4C,GAAd,OACN,gBAAC,OAAD,CAAMpC,IAAKoC,EAAON,GAAE,SAAW,IAAYtC,GAAvB,KAApB,IACSA,WAWzC6B,EAASgB,aAAe,CACpBZ,UAAW,SAGAJ","file":"component---src-templates-tags-tsx-0ceef0d81ca57c646622.js","sourcesContent":["import React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport Layout from '../components/layout';\r\nimport PostCard from '../components/post-card/post-card';\r\nimport SEO from '../components/seo';\r\nimport { TagPostsWrapper, TagPageHeading, TagName } from './templates.style';\r\n\r\nconst Tags = ({ pageContext, data }: any) => {\r\n  const { tag } = pageContext;\r\n  const { edges, totalCount } = data.allMarkdownRemark;\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title={tag} description={`A collection of ${totalCount} post${totalCount > 1 ? \"s\" : \"\"}`} />\r\n\r\n      <TagPostsWrapper>\r\n        <TagPageHeading>\r\n          <TagName>{tag}</TagName>\r\n          {`A collection of ${totalCount} post${totalCount > 1 && \"s\"}`}\r\n        </TagPageHeading>\r\n        {edges.map(({ node }: any) => (\r\n          <PostCard\r\n            key={node.fields.slug}\r\n            title={node.frontmatter.title}\r\n            url={node.fields.slug}\r\n            description={node.frontmatter.description || node.excerpt}\r\n            date={node.frontmatter.date}\r\n            tags={node.frontmatter.tags}\r\n          />\r\n        ))}\r\n      </TagPostsWrapper>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Tags;\r\n\r\nexport const pageQuery = graphql`\r\n  query TagsQuery($tag: String) {\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          excerpt(pruneLength: 300)\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"DD [<span>] MMMM [</span>]\")\r\n            title\r\n            tags\r\n            description\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import styled from 'styled-components';\r\nimport {themeGet} from '@styled-system/theme-get';\r\n\r\nexport const PostCardWrapper = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nexport const PostPreview = styled.div`\r\n  margin-bottom: 45px;\r\n  position: relative;\r\n\r\n  img {\r\n    border-radius: 3px;\r\n  }\r\n`;\r\n\r\nexport const PostDetails = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nexport const PostDate = styled.div`\r\n  font-size: 90px;\r\n  font-weight: 700;\r\n  text-align: center;\r\n  padding: 30px 35px 15px 35px;\r\n  margin-right: 20px;\r\n  line-height: 1;\r\n  color: ${themeGet('colors.postDate')};\r\n  a {\r\n    color: ${themeGet('colors.postDate')};\r\n  }\r\n  @media (max-width: 1200px) {\r\n    font-size: 70px;\r\n    padding: 25px 25px 15px 25px;\r\n    margin-right: 35px;\r\n  }\r\n  @media (max-width: 990px) {\r\n    font-size: 56px;\r\n    padding: 20px 20px 15px 20px;\r\n    margin-right: 25px;\r\n  }\r\n  @media (max-width: 575px) {\r\n    display: none;\r\n  }\r\n\r\n  > span {\r\n    font-size: 13px;\r\n    font-weight: 400;\r\n    display: block;\r\n    margin-top: 12px;\r\n    text-transform: uppercase;\r\n  }\r\n`;\r\n\r\nexport const PostContent = styled.div`\r\n  align-self: center;\r\n`;\r\n\r\nexport const PostTitle = styled.h2`\r\n  font-size: 30px;\r\n  font-weight: 700;\r\n  color: ${themeGet('colors.postTitle')};\r\n  line-height: 1.53;\r\n  margin-bottom: 10px;\r\n\r\n  a {\r\n    color: ${themeGet('colors.postTitle')};\r\n  }\r\n\r\n  @media (max-width: 1200px) {\r\n    font-size: 26px;\r\n  }\r\n  @media (max-width: 990px) {\r\n    font-size: 21px;\r\n    margin-bottom: 12px;\r\n  }\r\n  @media (max-width: 575px) {\r\n    font-size: 20px;\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n\r\nexport const Excerpt = styled.p`\r\n  font-size: ${themeGet('fontSizes.3')}px;\r\n  color: ${themeGet('colors.bodyText')};\r\n  font-weight: 400;\r\n  line-height: 2;\r\n  margin-bottom: 0;\r\n  @media (max-width: 990px) {\r\n    font-size: 14px;\r\n  }\r\n`;\r\n\r\nexport const PostTags = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  margin-top: 15px;\r\n\r\n  a {\r\n    display: block;\r\n    margin-right: 30px;\r\n    font-size: 14px;\r\n    font-weight: 400;\r\n    color: ${themeGet('colors.primaryLinks')};\r\n    transition: 0.15s ease-in-out;\r\n    &:hover {\r\n      color: ${themeGet('colors.primaryLinksHover')};\r\n    @media (max-width: 990px) {\r\n      font-size: 13px;\r\n      margin-right: 25px;\r\n    }\r\n  }\r\n`;\r\n","import * as React from 'react';\r\nimport {Link} from 'gatsby';\r\nimport _ from 'lodash';\r\nimport Img from 'gatsby-image';\r\nimport {\r\n    Excerpt,\r\n    PostCardWrapper,\r\n    PostContent,\r\n    PostDate,\r\n    PostDetails,\r\n    PostPreview,\r\n    PostTags,\r\n    PostTitle,\r\n} from './post-card.style';\r\n\r\ninterface PostCardProps {\r\n    image?: any;\r\n    title: string;\r\n    description?: string;\r\n    url: string;\r\n    date?: string;\r\n    tags?: [];\r\n    collection?: string;\r\n    className?: string;\r\n    imageType?: 'fixed' | 'fluid';\r\n}\r\n\r\nconst PostCard: React.FunctionComponent<PostCardProps> = (\r\n    {\r\n        image,\r\n        title,\r\n        description,\r\n        url,\r\n        date,\r\n        tags,\r\n        collection,\r\n        className,\r\n        imageType,\r\n        ...props\r\n    }\r\n) => {\r\n    // Add all classs to an array\r\n    const addAllClasses = ['post_card'];\r\n\r\n    // className prop checking\r\n    if (className) {\r\n        addAllClasses.push(className);\r\n    }\r\n\r\n    return (\r\n        <PostCardWrapper className={addAllClasses.join(' ')} {...props}>\r\n            {image == null ? null : (\r\n                <PostPreview className=\"post_preview\">\r\n                    <Link to={url}>\r\n                        {imageType === 'fluid' ? (\r\n                            <Img fluid={image} alt=\"post preview\"/>\r\n                        ) : (\r\n                            <Img fixed={image} alt=\"post preview\"/>\r\n                        )}\r\n                    </Link>\r\n                </PostPreview>\r\n            )}\r\n\r\n            <PostDetails className=\"post_details\">\r\n                {date && (\r\n                    <PostDate\r\n                        dangerouslySetInnerHTML={{\r\n                            __html: date,\r\n                        }}\r\n                        className=\"post_date\"\r\n                    />\r\n                )}\r\n\r\n                <PostContent className=\"post_content\">\r\n                    <PostTitle className=\"post_title\">\r\n                        <Link to={url}>{title}</Link>\r\n                    </PostTitle>\r\n                    {description && (\r\n                        <Excerpt\r\n                            dangerouslySetInnerHTML={{\r\n                                __html: description,\r\n                            }}\r\n                            className=\"excerpt\"\r\n                        />\r\n                    )}\r\n\r\n                    {collection ? null : tags == null ? null : (\r\n                        <PostTags className=\"post_tags\">\r\n                            {tags.map((tag: string, index: number) => (\r\n                                <Link key={index} to={`/tags/${_.kebabCase(tag)}/`}>\r\n                                    {`#${tag}`}\r\n                                </Link>\r\n                            ))}\r\n                        </PostTags>\r\n                    )}\r\n                </PostContent>\r\n            </PostDetails>\r\n        </PostCardWrapper>\r\n    );\r\n};\r\n\r\nPostCard.defaultProps = {\r\n    imageType: 'fluid',\r\n};\r\n\r\nexport default PostCard;\r\n"],"sourceRoot":""}